name: Build and Publish Docker to ghcr

on:
  pull_request:
    branches:
      - release
    types:
      - closed
permissions: write-all
env:
  # github.repository as <account>/<repo>
  PROJECT_NAME: sample
  PULL_REQUEST_BODY: "${{ github.event.pull_request.body }}"
  PATH_CACHE: /tmp/docker-img-arch

jobs:
  build-and-push:
    # pull requestがmergeされた時のみ実行 
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      # generate tags from pull request comments
      - name: Geterate Tags From PR Comments
        id: pr-comment
        run: |
          echo "$PULL_REQUEST_BODY" | grep -Po '(?<=tag: )v\d+\.\d+\.\d+' | xargs -I {} echo "IMAGEVERSION={}" >> $GITHUB_ENV
      # login ghcr
      - name: login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: setup cache
        id: setupcache
        run: |
          : # Dockerfile からハッシュ値を作成
          HASH_IMAGE=${{ hashFiles('./Dockerfile') }}
          : # 日付と 7 文字のハッシュ値で合計 13 文字の ID を作成
          VARIANT=$(TZ=UTC-9 date '+%Y%m')${HASH_IMAGE:0:7}
          KEY="${{ env.PROJECT_NAME }}:${VARIANT}"
          : # キャッシュする tar アーカイブ名とパスの設定
          NAME_TAR="${{ env.PROJECT_NAME }}.${VARIANT}.tar"
          PATH_TAR=${{ env.PATH_CACHE }}"/${NAME_TAR}"
          : # 変数を他の run でも使えるように output
          echo "::set-output name=KEY::${KEY}"
          echo "::set-output name=PATH_TAR::${PATH_TAR}"
      - name: read cache 
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.PATH_CACHE }}
          key: ${{ steps.setupcache.outputs.KEY }}
      - name: load docker image if exists
        if: steps.cache.outputs.cache-hit == 'true'
        run: docker load --input ${{ steps.setupcache.outputs.PATH_TAR }}
      # build docker image 
      - name: build docker image
        id: build-image
        run: |
           docker compose -p ${{ env.PROJECT_NAME }} -f docker-compose.yml build   
      # get docker image id and repo
      - name: get docker image id and repo
        id: get-idrepo-image
        run: |
          docker images
          docker images --format "{{.ID}} {{.Repository}}" | tee image_list.txt
        # save docker image 
      - name: save docker image
        id: save-image
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ env.PATH_CACHE }}
          while IFS= read -r line; do
            image_name=$(echo $line | awk '{print $2}')
            docker save --output ${{ steps.setupcache.outputs.PATH_TAR }} ${image_name}
          done < image_list.txt  
      - name: save cache 
        id: savecache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.PATH_CACHE }}
          key: ${{ steps.setupcache.outputs.KEY }}        
      # add tags and push docker image 
      - name: add tags and push docker image
        id: addtags-and-push-image
        run: |
          while IFS= read -r line; do
            image_id=$(echo $line | awk '{print $1}')
            image_name=$(echo $line | awk '{print $2}')

            latest_tag="ghcr.io/${{ env.OWNER_LC }}/${image_name}:latest"
            version_tag="ghcr.io/${{ env.OWNER_LC }}/${image_name}:${{ env.IMAGEVERSION }}"

            docker tag "$image_id" "$latest_tag"
            docker tag "$image_id" "$version_tag"

            docker push "$latest_tag"
            docker push "$version_tag"
          done < image_list.txt
